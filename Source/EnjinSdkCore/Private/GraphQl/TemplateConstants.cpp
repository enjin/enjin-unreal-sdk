// Copyright 2022 Enjin Pte. Ltd. All Rights Reserved.

#include "TemplateConstants.h"

using namespace Enjin::Sdk::GraphQl;

const TMap<FString, FString> FTemplateConstants::Templates = []
{
	TMap<FString, FString> Map;

	Map.Add(TEXT("enjin.sdk.player.AdvancedSendAsset"), TEXT("mutation AdvancedSendAsset($transfers: [TransferInput!]!, $data: String, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: AdvancedSendAsset( transfers: $transfers, data: $data ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.ApproveEnj"), TEXT("mutation ApproveEnj($value: BigInt!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ApproveEnj( value: $value ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.ApproveMaxEnj"), TEXT("mutation ApproveMaxEnj($transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ApproveMaxEnj { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.BridgeAsset"), TEXT("mutation BridgeAsset($assetId: String!, $assetIndex: String, $value: BigInt, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeAsset( assetId: $assetId assetIndex: $assetIndex value: $value ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.BridgeAssets"), TEXT("mutation BridgeAssets($assetId: String!, $assetIndices: [String!]!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeAssets( assetId: $assetId assetIndices: $assetIndices ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.BridgeClaimAsset"), TEXT("mutation BridgeClaimAsset($assetId: String!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeClaimAsset( assetId: $assetId ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.GetPlayer"), TEXT("query GetPlayer($withLinkingInfo: Boolean = false, $withPlayerWallet: Boolean = false, $linkingCodeQrSize: Int, $walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetPlayer { ...Player } } fragment Player on Player { id linkingInfo(qrSize: $linkingCodeQrSize) @include(if: $withLinkingInfo) { code qr } wallet @include(if: $withPlayerWallet) { ...Wallet } createdAt updatedAt } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.GetWallet"), TEXT("query GetWallet($walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetWallet { ...Wallet } } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.MeltAsset"), TEXT("mutation MeltAsset($melts: [MeltInput!]!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: MeltAsset( melts: $melts ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.Message"), TEXT("mutation Message($message: String!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: Message( message: $message ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.ResetEnjApproval"), TEXT("mutation ResetEnjApproval($transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ResetEnjApproval { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.SendAsset"), TEXT("mutation SendAsset($recipientAddress: EthAddress!, $assetId: String!, $assetIndex: String, $value: BigInt, $data: String, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SendAsset( to: $recipientAddress, assetId: $assetId, assetIndex: $assetIndex, value: $value, data: $data ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.SendEnj"), TEXT("mutation SendEnj($recipientAddress: EthAddress!, $value: BigInt!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SendEnj( to: $recipientAddress, value: $value ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.SetApprovalForAll"), TEXT("mutation SetApprovalForAll($operatorAddress: EthAddress!, $approved: Boolean!, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetApprovalForAll( operator: $operatorAddress, approved: $approved ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.player.UnlinkWallet"), TEXT("mutation UnlinkWallet { result: UnlinkWallet }"));
	Map.Add(TEXT("enjin.sdk.project.AdvancedSendAsset"), TEXT("mutation AdvancedSendAsset($transfers: [TransferInput!]!, $data: String, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: AdvancedSendAsset( transfers: $transfers, data: $data, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.ApproveEnj"), TEXT("mutation ApproveEnj($value: BigInt!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ApproveEnj( value: $value, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.ApproveMaxEnj"), TEXT("mutation ApproveMaxEnj($ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ApproveMaxEnj( wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.AuthPlayer"), TEXT("query AuthPlayer($id: String!) { result: AuthPlayer( id: $id ) { accessToken expiresIn } }"));
	Map.Add(TEXT("enjin.sdk.project.AuthProject"), TEXT("query AuthProject($uuid: String!, $secret: String!) { result: AuthProject( uuid: $uuid, secret: $secret ) { accessToken expiresIn } }"));
	Map.Add(TEXT("enjin.sdk.project.BridgeAsset"), TEXT("mutation BridgeAsset($assetId: String!, $assetIndex: String, $value: BigInt, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeAsset( assetId: $assetId assetIndex: $assetIndex value: $value wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.BridgeAssets"), TEXT("mutation BridgeAssets($assetId: String!, $assetIndices: [String!]!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeAssets( assetId: $assetId assetIndices: $assetIndices wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.BridgeClaimAsset"), TEXT("mutation BridgeClaimAsset($assetId: String!, $wallet: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: BridgeClaimAsset( assetId: $assetId wallet: $wallet ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.CompleteTrade"), TEXT("mutation CompleteTrade($tradeId: String!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: CompleteTrade( tradeId: $tradeId, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.CreateAsset"), TEXT("mutation CreateAsset($name: String!, $totalSupply: BigInt!, $initialReserve: BigInt!, $supplyModel: AssetSupplyModel!, $meltValue: BigInt!, $meltFeeRatio: Int!, $transferable: AssetTransferable!, $transferFeeSettings: AssetTransferFeeSettingsInput, $nonFungible: Boolean!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: CreateAsset( name: $name, totalSupply: $totalSupply, initialReserve: $initialReserve, supplyModel: $supplyModel, meltValue: $meltValue, meltFeeRatio: $meltFeeRatio, transferable: $transferable, transferFeeSettings: $transferFeeSettings, nonFungible: $nonFungible, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.CreatePlayer"), TEXT("mutation CreatePlayer($id: String!) { result: CreatePlayer( id: $id ) { accessToken expiresIn } }"));
	Map.Add(TEXT("enjin.sdk.project.CreateTrade"), TEXT("mutation CreateTrade($askingAssets: [TradeInput!]!, $offeringAssets: [TradeInput!]!, $recipientAddress: EthAddress!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: CreateTrade( askingAssets: $askingAssets, offeringAssets: $offeringAssets, secondParty: $recipientAddress, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.DecreaseMaxMeltFee"), TEXT("mutation DecreaseMaxMeltFee($assetId: String!, $maxMeltFee: Int!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: DecreaseMaxMeltFee( assetId: $assetId, maxMeltFee: $maxMeltFee, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.DecreaseMaxTransferFee"), TEXT("mutation DecreaseMaxTransferFee($assetId: String!, $maxTransferFee: BigInt!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: DecreaseMaxTransferFee( assetId: $assetId, maxTransferFee: $maxTransferFee, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.DeletePlayer"), TEXT("mutation DeletePlayer($id: String!) { result: DeletePlayer( id: $id ) }"));
	Map.Add(TEXT("enjin.sdk.project.GetPlayer"), TEXT("query GetPlayer($id: String!, $withLinkingInfo: Boolean = false, $withPlayerWallet: Boolean = false, $linkingCodeQrSize: Int, $walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetPlayer( id: $id ) { ...Player } } fragment Player on Player { id linkingInfo(qrSize: $linkingCodeQrSize) @include(if: $withLinkingInfo) { code qr } wallet @include(if: $withPlayerWallet) { ...Wallet } createdAt updatedAt } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.GetPlayers"), TEXT("query GetPlayers($filter: PlayerFilter, $pagination: PaginationInput = {page:1,limit:100}, $withLinkingInfo: Boolean = false, $withPlayerWallet: Boolean = false, $linkingCodeQrSize: Int, $walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetPlayers( filter: $filter pagination: $pagination ) { items { ...Player } cursor { ...PaginationCursor } } } fragment PaginationCursor on PaginationCursor { total perPage currentPage hasPages from to lastPage hasMorePages } fragment Player on Player { id linkingInfo(qrSize: $linkingCodeQrSize) @include(if: $withLinkingInfo) { code qr } wallet @include(if: $withPlayerWallet) { ...Wallet } createdAt updatedAt } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.GetWallet"), TEXT("query GetWallet($userId: String, $ethAddress: EthAddress, $walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetWallet( userId: $userId ethAddress: $ethAddress ) { ...Wallet } } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.GetWallets"), TEXT("query GetWallets($userIds: [String], $ethAddresses: [EthAddress], $walletBalanceFilter: BalanceFilter, $withAssetsCreated: Boolean = false, $withWalletBalances: Boolean = false, $withWalletTransactions: Boolean = false, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetWallets( userIds: $userIds ethAddresses: $ethAddresses ) { ...Wallet } } fragment Wallet on Wallet { ethAddress enjAllowance enjBalance ethBalance assetsCreated @include(if: $withAssetsCreated) { ...Asset } balances(filter: $walletBalanceFilter) @include(if: $withWalletBalances) { ...Balance } transactions @include(if: $withWalletTransactions) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.InvalidateAssetMetadata"), TEXT("mutation InvalidateAssetMetadata($id: String!) { result: InvalidateAssetMetadata( id: $id ) }"));
	Map.Add(TEXT("enjin.sdk.project.MeltAsset"), TEXT("mutation MeltAsset($melts: [MeltInput!]!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: MeltAsset( melts: $melts, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.Message"), TEXT("mutation Message($message: String!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: Message( message: $message, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.MintAsset"), TEXT("mutation MintAsset($assetId: String!, $mints: [MintInput!]!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: MintAsset( assetId: $assetId, mints: $mints, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.ReleaseReserve"), TEXT("mutation ReleaseReserve($assetId: String!, $value: BigInt!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ReleaseReserve( assetId: $assetId, value: $value, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.ResetEnjApproval"), TEXT("mutation ResetEnjApproval($ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: ResetEnjApproval( wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SendAsset"), TEXT("mutation SendAsset($recipientAddress: EthAddress!, $assetId: String!, $assetIndex: String, $value: BigInt, $data: String, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SendAsset( to: $recipientAddress, assetId: $assetId, assetIndex: $assetIndex, value: $value, data: $data, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SendEnj"), TEXT("mutation SendEnj($recipientAddress: EthAddress!, $value: BigInt!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SendEnj( to: $recipientAddress, value: $value, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetApprovalForAll"), TEXT("mutation SetApprovalForAll($operatorAddress: EthAddress!, $approved: Boolean!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetApprovalForAll( operator: $operatorAddress, approved: $approved, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetMeltFee"), TEXT("mutation SetMeltFee($assetId: String!, $meltFee: Int!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetMeltFee( assetId: $assetId, meltFee: $meltFee, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetTransferFee"), TEXT("mutation SetTransferFee($assetId: String!, $transferFee: BigInt!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetTransferFee( assetId: $assetId, transferFee: $transferFee, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetTransferable"), TEXT("mutation SetTransferable($assetId: String!, $assetIndex: String, $transferable: AssetTransferable!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetTransferable( assetId: $assetId, assetIndex: $assetIndex, transferable: $transferable, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetUri"), TEXT("mutation SetUri($assetId: String!, $assetIndex: String, $uri: String, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetUri( assetId: $assetId, assetIndex: $assetIndex, uri: $uri, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.SetWhitelisted"), TEXT("mutation SetWhitelisted($assetId: String!, $accountAddress: EthAddress!, $whitelisted: Whitelisted!, $whitelistedAddress: EthAddress, $on: Boolean!, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: SetWhitelisted( assetId: $assetId, account: $accountAddress, whitelisted: $whitelisted, whitelistedAddress: $whitelistedAddress, on: $on wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.project.UnlinkWallet"), TEXT("mutation UnlinkWallet($ethAddress: EthAddress!) { result: UnlinkWallet( address: $ethAddress ) }"));
	Map.Add(TEXT("enjin.sdk.project.UpdateName"), TEXT("mutation UpdateName($assetId: String!, $name: String, $ethAddress: EthAddress, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: UpdateName( assetId: $assetId, name: $name, wallet: $ethAddress ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
    Map.Add(TEXT("enjin.sdk.shared.CancelTransaction"), TEXT("mutation CancelTransaction($id: Int) { result: CancelTransaction( id: $id ) }"));
	Map.Add(TEXT("enjin.sdk.shared.GetAsset"), TEXT("query GetAsset($id: String!, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetAsset( id: $id ) { ...Asset } } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.shared.GetAssets"), TEXT("query GetAssets($filter: AssetFilter, $sort: AssetSortInput = {field:id,direction:asc}, $pagination: PaginationInput = {page:1,limit:100}, $assetIdFormat: AssetIdFormat, $withStateData: Boolean = false, $withConfigData: Boolean = false, $withAssetBlocks: Boolean = false, $withCreator: Boolean = false, $withMeltDetails: Boolean = false, $withMetadataURI: Boolean = false, $withSupplyDetails: Boolean = false, $withTransferSettings: Boolean = false, $withAssetVariantMode: Boolean = false, $withAssetVariants: Boolean = false, $withAssetMetadata: Boolean = false) { result: GetAssets( filter: $filter, sort: $sort, pagination: $pagination ) { items { ...Asset } cursor { ...PaginationCursor } } } fragment PaginationCursor on PaginationCursor { total perPage currentPage hasPages from to lastPage hasMorePages } fragment Asset on Asset { id(format: $assetIdFormat) name stateData @include(if: $withStateData) { nonFungible creator @include(if: $withCreator) blockHeight @include(if: $withAssetBlocks) firstBlock @include(if: $withAssetBlocks) reserve @include(if: $withSupplyDetails) supplyModel @include(if: $withSupplyDetails) circulatingSupply @include(if: $withSupplyDetails) mintableSupply @include(if: $withSupplyDetails) totalSupply @include(if: $withSupplyDetails) } configData @include(if: $withConfigData) { meltFeeRatio @include(if: $withMeltDetails) meltFeeMaxRatio @include(if: $withMeltDetails) meltValue @include(if: $withMeltDetails) metadataURI @include(if: $withMetadataURI) transferable @include(if: $withTransferSettings) transferFeeSettings @include(if: $withTransferSettings) { type assetId value } } variantMode @include(if: $withAssetVariantMode) variants @include(if: $withAssetVariants) { id assetId variantMetadata @include(if: $withAssetMetadata) usageCount createdAt updatedAt } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.shared.GetBalances"), TEXT("query GetBalances($filter: BalanceFilter, $pagination: PaginationInput = {page:1,limit:100}, $balIdFormat: AssetIdFormat, $balIndexFormat: AssetIndexFormat, $withBalProjectUuid: Boolean = false, $withBalWalletAddress: Boolean = false) { result: GetBalances( filter: $filter, pagination: $pagination ) { items { ...Balance } cursor { ...PaginationCursor } } } fragment PaginationCursor on PaginationCursor { total perPage currentPage hasPages from to lastPage hasMorePages } fragment Balance on Balance { id(format: $balIdFormat) index(format: $balIndexFormat) value project @include(if: $withBalProjectUuid) { uuid } wallet @include(if: $withBalWalletAddress) { ethAddress } }"));
	Map.Add(TEXT("enjin.sdk.shared.GetGasPrices"), TEXT("query GetGasPrices { result: GetGasPrice { safeLow average fast fastest } }"));
	Map.Add(TEXT("enjin.sdk.shared.GetPlatform"), TEXT("query GetPlatform($withContracts: Boolean = false, $withNotificationDrivers: Boolean = false) { result: GetPlatform { id name network contracts @include(if: $withContracts) { enj cryptoItems platformRegistry supplyModels { fixed settable infinite collapsing annualValue annualPercentage } } notifications @include(if: $withNotificationDrivers) { pusher { key namespace channels { project player asset wallet } options { cluster encrypted } } } } }"));
	Map.Add(TEXT("enjin.sdk.shared.GetProject"), TEXT("query GetProject { result: GetProject { ...Project } } fragment Project on Project { uuid name description image createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.shared.GetTransaction"), TEXT("query GetTransaction($id: Int, $transactionId: String, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: GetTransaction( id: $id, transactionId: $transactionId ) { ...Transaction } } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));
	Map.Add(TEXT("enjin.sdk.shared.GetTransactions"), TEXT("query GetTransactions($filter: TransactionFilter, $sort: TransactionSortInput = {field:created_at,direction:asc}, $pagination: PaginationInput = {page:1,limit:100}, $transactionAssetIdFormat: AssetIdFormat, $withMeta: Boolean = false, $withBlockchainData: Boolean = false, $withEncodedData: Boolean = false, $withAssetData: Boolean = false, $withSignedTxs: Boolean = false, $withError: Boolean = false, $withNonce: Boolean = false, $withState: Boolean = false, $withReceipt: Boolean = false, $withReceiptLogs: Boolean = false, $withLogEvent: Boolean = false, $withTransactionProjectUuid: Boolean = false, $withTransactionWalletAddress: Boolean = false) { result: GetTransactions( filter: $filter sort: $sort pagination: $pagination ) { items { ...Transaction } cursor { ...PaginationCursor } } } fragment PaginationCursor on PaginationCursor { total perPage currentPage hasPages from to lastPage hasMorePages } fragment Transaction on Transaction { id transactionId title @include(if: $withMeta) contract @include(if: $withMeta) projectWallet @include(if: $withMeta) type value @include(if: $withAssetData) retryState @include(if: $withState) state @include(if: $withState) accepted @include(if: $withState) blockchainData @include(if: $withBlockchainData) { encodedData @include(if: $withEncodedData) signedTransaction @include(if: $withSignedTxs) signedBackupTransaction @include(if: $withSignedTxs) signedCancelTransaction @include(if: $withSignedTxs) receipt @include(if: $withReceipt) { blockHash blockNumber cumulativeGasUsed gasUsed from to transactionHash transactionIndex status logs @include(if: $withReceiptLogs) { blockNumber address transactionHash data topics event @include(if: $withLogEvent) { name inputs nonIndexedInputs indexedInputs signature encodedSignature } } } error @include(if: $withError) nonce @include(if: $withNonce) } project @include(if: $withTransactionProjectUuid) { uuid } asset @include(if: $withAssetData) { id(format: $transactionAssetIdFormat) } wallet @include(if: $withTransactionWalletAddress) { ethAddress } createdAt updatedAt }"));

	return Map;
}();
